{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport { useStaticRendering } from \"mobx-react\";\nimport WindowStore from \"./windowStore\";\nimport UserStore from \"./userStore\";\nimport ModalStore from \"./modalStore\";\n\nvar RootStore = function RootStore() {\n  _classCallCheck(this, RootStore);\n\n  // here you need bind other store to the RootStore. So you can use other store by used rootStore.XXXX\n  this.UserStore = new UserStore(this);\n  this.WindowStore = new WindowStore(this);\n  this.ModalStore = new ModalStore(this);\n};\n\nvar isServer = typeof window === \"undefined\";\nuseStaticRendering(isServer);\nvar store = null;\nexport function initializeStore(initialData) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return new RootStore(isServer, initialData);\n  }\n\n  if (store === null) {\n    store = new RootStore(isServer, initialData);\n  }\n\n  return store;\n}","map":{"version":3,"sources":["D:\\my_projects\\next_ezfood\\store\\rootStore.js"],"names":["useStaticRendering","WindowStore","UserStore","ModalStore","RootStore","isServer","window","store","initializeStore","initialData"],"mappings":";AAAA,SAASA,kBAAT,QAAmC,YAAnC;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;IAEMC,S,GACJ,qBAAc;AAAA;;AACZ;AACA,OAAKF,SAAL,GAAiB,IAAIA,SAAJ,CAAc,IAAd,CAAjB;AACA,OAAKD,WAAL,GAAmB,IAAIA,WAAJ,CAAgB,IAAhB,CAAnB;AACA,OAAKE,UAAL,GAAkB,IAAIA,UAAJ,CAAe,IAAf,CAAlB;AACD,C;;AAGH,IAAME,QAAQ,GAAG,OAAOC,MAAP,KAAkB,WAAnC;AACAN,kBAAkB,CAACK,QAAD,CAAlB;AACA,IAAIE,KAAK,GAAG,IAAZ;AAEA,OAAO,SAASC,eAAT,CAAyBC,WAAzB,EAAsC;AAC3C;AACA,MAAIJ,QAAJ,EAAc;AACZ,WAAO,IAAID,SAAJ,CAAcC,QAAd,EAAwBI,WAAxB,CAAP;AACD;;AACD,MAAIF,KAAK,KAAK,IAAd,EAAoB;AAClBA,IAAAA,KAAK,GAAG,IAAIH,SAAJ,CAAcC,QAAd,EAAwBI,WAAxB,CAAR;AACD;;AACD,SAAOF,KAAP;AACD","sourcesContent":["import { useStaticRendering } from \"mobx-react\";\n\nimport WindowStore from \"./windowStore\";\nimport UserStore from \"./userStore\";\nimport ModalStore from \"./modalStore\";\n\nclass RootStore {\n  constructor() {\n    // here you need bind other store to the RootStore. So you can use other store by used rootStore.XXXX\n    this.UserStore = new UserStore(this);\n    this.WindowStore = new WindowStore(this);\n    this.ModalStore = new ModalStore(this);\n  }\n}\n\nconst isServer = typeof window === \"undefined\";\nuseStaticRendering(isServer);\nlet store = null;\n\nexport function initializeStore(initialData) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return new RootStore(isServer, initialData);\n  }\n  if (store === null) {\n    store = new RootStore(isServer, initialData);\n  }\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}